---
all:
  - www
  - apps
  - dev_access
  - data_storage
  - kibana
  - lambda_functions

apps:
  - api
  - search_api
  - admin_frontend
  - buyer_frontend
  - supplier_frontend

eb_apps:
  - api_app
  - search_api_app
  - admin_frontend_app
  - buyer_frontend_app
  - supplier_frontend_app

www:
  - nginx

data_storage:
  - database
  - documents_s3
  - communications_s3
  - submissions_s3
  - agreements_s3
  - lambda_code_s3
  - elasticsearch
  - monitoring

lambda_functions:
  - cloudwatch_logs_lambda

dev_access:
  - database_dev_access
  - elasticsearch_dev_access
  - elasticsearch_ssh_access
  - nginx_ssh_access
  - api_ssh_access
  - search_api_ssh_access
  - admin_frontend_ssh_access
  - buyer_frontend_ssh_access
  - supplier_frontend_ssh_access

route53zone:
  name: "route53-zone"
  template: cloudformation_templates/aws_route53_hosted_zone.json
  parameters:
    RootDomain: "{{ root_domain }}"
    VPCId: "{{ vpc_id }}"
    InternalRootDomain: "{{ internal_root_domain }}"

route53rootrecords:
  name: "route53-root-records"
  template: cloudformation_templates/aws_route53_root_records.json
  dependencies:
    - route53zone
  parameters:
    HostedZoneName: "{{ stacks.route53zone.outputs.HostedZoneName }}"

route53digitalservicesstore:
  name: "route53-digital-services-store"
  template: cloudformation_templates/aws_route53_digital_services_store.json
  dependencies:
    - nginx
  parameters:
    Domain: '{% if stage == "production" %}digitalservicesstore.service.gov.uk{% endif %}'
    LoadBalancerDNS: "{{ stacks.nginx.outputs.LoadBalancerDNS }}"
    LoadBalancerHostedZoneID: "{{ stacks.nginx.outputs.LoadBalancerHostedZoneID }}"

database:
  name: "rds-database-{{ stage }}-{{ environment }}"
  template: cloudformation_templates/aws_rds_database.json
  parameters:
    DBVersion: "{{ database.version }}"
    DBName: "{{ database.name }}"
    DBUser: "{{ database.user }}"
    DBPassword: "{{ database.password }}"
    DBInstanceType: "{{ database.instance_type }}"
    DBAllocatedStorage: "{{ database.allocated_storage }}"
    MultiAZ: "{{ database.multi_az }}"
    SlowQueryLogDurationMs: "{{ database.slow_query_log_duration_ms }}"
    BackupRetentionPeriod: "{{ database.backup_retention_period }}"
    DBSnapshotIdentifier: "{{ database.snapshot_id }}"

logs_s3:
  name: "logs-s3-{{ stage }}-{{ environment }}"
  template: cloudformation_templates/aws_s3.json
  parameters:
    BucketName: "digitalmarketplace-logs-{{ stage }}-{{ environment }}"
    LogsBucket: "digitalmarketplace-logs-{{ stage }}-{{ environment }}"
    AccessControl: "LogDeliveryWrite"

documents_s3:
  name: "documents-s3-{{ stage }}-{{ environment }}"
  template: cloudformation_templates/aws_s3.json
  dependencies:
    - logs_s3
  parameters:
    BucketName: "digitalmarketplace-documents-{{ stage }}-{{ environment }}"
    LogsBucket: "{{ stacks.logs_s3.outputs.Name }}"
    AccessControl: "Private"

communications_s3:
  name: "communications-s3-{{ stage }}-{{ environment }}"
  template: cloudformation_templates/aws_s3.json
  dependencies:
    - logs_s3
  parameters:
    BucketName: "digitalmarketplace-communications-{{ stage }}-{{ environment }}"
    LogsBucket: "{{ stacks.logs_s3.outputs.Name }}"
    AccessControl: "Private"

submissions_s3:
  name: "submissions-s3-{{ stage }}-{{ environment }}"
  template: cloudformation_templates/aws_s3.json
  dependencies:
    - logs_s3
  parameters:
    BucketName: "digitalmarketplace-submissions-{{ stage }}-{{ environment }}"
    LogsBucket: "{{ stacks.logs_s3.outputs.Name }}"
    AccessControl: "Private"

agreements_s3:
  name: "agreements-s3-{{ stage }}-{{ environment }}"
  template: cloudformation_templates/aws_s3.json
  dependencies:
    - logs_s3
  parameters:
    BucketName: "digitalmarketplace-agreements-{{ stage }}-{{ environment }}"
    LogsBucket: "{{ stacks.logs_s3.outputs.Name }}"
    AccessControl: "Private"

g7_draft_documents_s3:
  name: "g7-draft-documents-s3-{{ stage }}-{{ environment }}"
  template: cloudformation_templates/aws_s3.json
  dependencies:
    - logs_s3
  parameters:
    BucketName: "digitalmarketplace-g7-draft-documents-{{ stage }}-{{ environment }}"
    LogsBucket: "{{ stacks.logs_s3.outputs.Name }}"
    AccessControl: "Private"

monitoring:
  name: "monitoring-{{ stage }}-{{ environment }}"
  template: cloudformation_templates/aws_monitoring.json
  parameters:
    LogGroupName: "{{ stage }}-{{ environment }}"
    RetentionInDays: 3653
    Email: "{{ monitoring.email }}"

api_app:
  name: "digitalmarketplace-api-app"
  template: cloudformation_templates/aws_elasticbeanstalk_app.json
  parameters:
    ApplicationName: "digitalmarketplace-api"

api:
  name: "digitalmarketplace-api-{{ stage }}-{{ environment }}"
  repo_url: "git@github.com:alphagov/digitalmarketplace-api.git"
  template: cloudformation_templates/aws_digitalmarketplace_api.json
  dependencies:
    - api_app
    - search_api
    - database
    - route53zone
    - monitoring
  parameters:
    ApplicationName: "{{ stacks.api_app.parameters.ApplicationName }}"
    EnvironmentName: "dmapi-{{ stage[:3] }}-{{ environment }}"

    # EnvVar* variables are written to Elastic Beanstalk environment
    # as EnvVarDmVarName -> DM_VAR_NAME
    EnvVarDmEnvironment: "{{ stage }}"
    EnvVarDmAppName: "{{ stacks.api_app.parameters.ApplicationName|replace('digitalmarketplace-', '') }}"
    EnvVarDmMetricsNamespace: "{{ stage }}-{{ environment }}/{{ stacks.api_app.parameters.ApplicationName|replace('digitalmarketplace-', '') }}"
    EnvVarSqlalchemyDatabaseUri: "postgres://{{ database.user }}:{{ database.password}}@{{ stacks.database.outputs.URL }}"
    EnvVarDmApiAuthTokens: "{{ api.auth_tokens | join(':') }}"
    EnvVarDmSearchApiUrl: "{{ stacks.search_api.outputs.URL }}"
    EnvVarDmSearchApiAuthToken: "{{ search_api.auth_tokens[0] }}"

    KeyName: "{{ key_name }}"
    InstanceType: "{{ api.instance_type }}"
    MinInstanceCount: "{{ api.min_instance_count }}"
    MaxInstanceCount: "{{ api.max_instance_count }}"
    RDSSecurityGroup: "{{ stacks.database.outputs.SecurityGroup }}"

    VPCId: "{{ vpc_id }}"
    Subnets: "{{ subnets | join(',') }}"
    Domain: "{{ stage }}-{{ environment }}-api.{{ internal_root_domain }}"
    HostedZoneName: "{{ stacks.route53zone.outputs.InternalHostedZoneName }}"

    LogGroupName: "{{ stacks.monitoring.outputs.LogGroupName }}"
    JSONLogGroupName: "{{ stacks.monitoring.outputs.JSONLogGroupName }}"
    MonitoringSNSTopic: "{{ stacks.monitoring.outputs.MonitoringSNSTopic }}"

database_dev_access:
  name: "digitalmarketplace-api-{{ stage }}-{{ environment }}-dev-access"
  template: cloudformation_templates/aws_dev_access.json
  dependencies:
    - database
  parameters:
    CidrIPs: "{{ dev_user_ips | join(',') }}"
    FromPort: "{{ database.port }}"
    ToPort: "{{ database.port }}"
    SecurityGroup: "{{ stacks.database.outputs.SecurityGroup }}"

elasticsearch:
  name: "elasticsearch-{{ stage }}-{{ environment }}"
  template: cloudformation_templates/aws_elasticsearch.json
  dependencies:
    - monitoring
  parameters:
    KeyName: "{{ key_name }}"
    LogGroupName: "{{ stacks.monitoring.outputs.LogGroupName }}"
    Port: "{{ elasticsearch.port }}"
    LoadBalancerName: "elasticsearch-{{ stage[:3] }}-{{ environment }}"
    LoadBalancerSubnets: "{{ subnets | join(',') }}"
    GroupTag: "elasticsearch-{{ stage }}-{{ environment }}"
    InstanceCount: "{{ elasticsearch.instance_count }}"
    InstanceType: "{{ elasticsearch.instance_type }}"
    InstanceImage: "{{ elasticsearch.instance_image }}"

elasticsearch_dev_access:
  name: "elasticsearch-{{ stage }}-{{ environment }}-dev-access"
  template: cloudformation_templates/aws_dev_access.json
  dependencies:
    - elasticsearch
  parameters:
    CidrIPs: "{{ dev_user_ips | join(',') }}"
    FromPort: "{{ elasticsearch.port }}"
    ToPort: "{{ elasticsearch.port }}"
    SecurityGroup: "{{ stacks.elasticsearch.outputs.InstanceSecurityGroup }}"

elasticsearch_ssh_access:
  name: "elasticsearch-{{ stage }}-{{ environment }}-ssh-access"
  template: cloudformation_templates/aws_dev_access.json
  dependencies:
    - elasticsearch
  parameters:
    CidrIPs: "{{ dev_user_ips | join(',') }}"
    FromPort: 22
    ToPort: 22
    SecurityGroup: "{{ stacks.elasticsearch.outputs.InstanceSecurityGroup }}"

search_api_app:
  name: "digitalmarketplace-search-api-app"
  template: cloudformation_templates/aws_elasticbeanstalk_app.json
  parameters:
    ApplicationName: "digitalmarketplace-search-api"

search_api:
  name: "digitalmarketplace-search-api-{{ stage }}-{{ environment }}"
  repo_url: "git@github.com:alphagov/digitalmarketplace-search-api.git"
  template: cloudformation_templates/aws_digitalmarketplace_search_api.json
  dependencies:
    - search_api_app
    - elasticsearch
    - route53zone
    - monitoring
  parameters:
    ApplicationName: "{{ stacks.search_api_app.parameters.ApplicationName }}"
    EnvironmentName: "dmsearch-{{ stage[:3] }}-{{ environment }}"

    # EnvVar* variables are written to Elastic Beanstalk environment
    # as EnvVarDmVarName -> DM_VAR_NAME
    EnvVarDmAppName: "{{ stacks.search_api_app.parameters.ApplicationName|replace('digitalmarketplace-', '') }}"
    EnvVarDmEnvironment: "{{ stage }}"
    EnvVarDmMetricsNamespace: "{{ stage }}-{{ environment }}/{{ stacks.search_api_app.parameters.ApplicationName|replace('digitalmarketplace-', '') }}"
    EnvVarDmElasticsearchUrl: "{{ stacks.elasticsearch.outputs.URL }}"
    EnvVarDmSearchApiAuthTokens: "{{ search_api.auth_tokens | join(':') }}"

    KeyName: "{{ key_name }}"
    InstanceType: "{{ search_api.instance_type }}"
    MinInstanceCount: "{{ search_api.min_instance_count }}"
    MaxInstanceCount: "{{ search_api.max_instance_count }}"
    ElasticsearchPort: "{{ elasticsearch.port }}"
    ElasticsearchSecurityGroup: "{{ stacks.elasticsearch.outputs.LoadBalancerSecurityGroup }}"

    VPCId: "{{ vpc_id }}"
    Subnets: "{{ subnets | join(',') }}"
    Domain: "{{ stage }}-{{ environment }}-search-api.{{ internal_root_domain }}"
    HostedZoneName: "{{ stacks.route53zone.outputs.InternalHostedZoneName }}"

    LogGroupName: "{{ stacks.monitoring.outputs.LogGroupName }}"
    JSONLogGroupName: "{{ stacks.monitoring.outputs.JSONLogGroupName }}"
    MonitoringSNSTopic: "{{ stacks.monitoring.outputs.MonitoringSNSTopic }}"

admin_frontend_app:
  name: "digitalmarketplace-admin-frontend-app"
  template: cloudformation_templates/aws_elasticbeanstalk_app.json
  parameters:
    ApplicationName: "digitalmarketplace-admin-frontend"

admin_frontend:
  name: "digitalmarketplace-admin-frontend-{{ stage }}-{{ environment }}"
  repo_url: "git@github.com:alphagov/digitalmarketplace-admin-frontend.git"
  template: cloudformation_templates/aws_digitalmarketplace_admin_frontend.json
  dependencies:
    - documents_s3
    - communications_s3
    - submissions_s3
    - agreements_s3
    - api
    - admin_frontend_app
    - route53zone
    - monitoring
  parameters:
    ApplicationName: "{{ stacks.admin_frontend_app.parameters.ApplicationName }}"
    EnvironmentName: "dmadmin-{{ stage[:3] }}-{{ environment }}"

    # EnvVar* variables are written to Elastic Beanstalk environment
    # as EnvVarDmVarName -> DM_VAR_NAME
    EnvVarDmAppName: "{{ stacks.admin_frontend_app.parameters.ApplicationName|replace('digitalmarketplace-', '') }}"
    EnvVarDmEnvironment: "{{ stage }}"
    EnvVarDmMetricsNamespace: "{{ stage }}-{{ environment }}/{{ stacks.admin_frontend_app.parameters.ApplicationName|replace('digitalmarketplace-', '') }}"
    EnvVarDmApiUrl: "{{ stacks.api.outputs.URL }}"
    EnvVarDmS3DocumentBucket: "{{ stacks.documents_s3.outputs.Name }}"
    EnvVarDmAgreementsBucket: "{{ stacks.agreements_s3.outputs.Name }}"
    EnvVarDmCommunicationsBucket: "{{ stacks.communications_s3.outputs.Name }}"
    EnvVarDmDocumentsBucket: "{{ stacks.documents_s3.outputs.Name }}"
    EnvVarDmSubmissionsBucket: "{{ stacks.submissions_s3.outputs.Name }}"
    EnvVarDmAssetsUrl: "https://{% if stage != 'production' %}{{ stage }}-{% endif %}{% if stage != environment %}{{ environment }}-{% endif %}assets.{{root_domain}}"
    EnvVarDmAdminFrontendApiAuthToken: "{{ api.auth_tokens[0] }}"
    EnvVarDmDataApiUrl: "{{ stacks.api.outputs.URL }}"
    EnvVarDmDataApiAuthToken: "{{ api.auth_tokens[0] }}"
    EnvVarDmMandrillApiKey: "{{ shared_tokens.mandrill_key }}"
    EnvVarDmSharedEmailKey: "{{ shared_tokens.shared_email_key }}"
    EnvVarSharedEmailKey: "{{ shared_tokens.shared_email_key }}"
    EnvVarDmAdminFrontendCookieSecret: "{{ admin_frontend.cookie_secret }}"
    EnvVarSecretKey: "{{ admin_frontend.cookie_secret }}"

    KeyName: "{{ key_name }}"
    InstanceType: "{{ admin_frontend.instance_type }}"
    MinInstanceCount: "{{ admin_frontend.min_instance_count }}"
    MaxInstanceCount: "{{ admin_frontend.max_instance_count }}"

    VPCId: "{{ vpc_id }}"
    Subnets: "{{ subnets | join(',') }}"
    Domain: "{{ stage }}-{{ environment }}-admin-frontend.{{ internal_root_domain }}"
    HostedZoneName: "{{ stacks.route53zone.outputs.InternalHostedZoneName }}"

    LogGroupName: "{{ stacks.monitoring.outputs.LogGroupName }}"
    JSONLogGroupName: "{{ stacks.monitoring.outputs.JSONLogGroupName }}"
    MonitoringSNSTopic: "{{ stacks.monitoring.outputs.MonitoringSNSTopic }}"

buyer_frontend_app:
  name: "digitalmarketplace-buyer-frontend-app"
  template: cloudformation_templates/aws_elasticbeanstalk_app.json
  parameters:
    ApplicationName: "digitalmarketplace-buyer-frontend"

buyer_frontend:
  name: "digitalmarketplace-buyer-frontend-{{ stage }}-{{ environment }}"
  repo_url: "git@github.com:alphagov/digitalmarketplace-buyer-frontend.git"
  template: cloudformation_templates/aws_digitalmarketplace_buyer_frontend.json
  dependencies:
    - documents_s3
    - api
    - search_api
    - buyer_frontend_app
    - route53zone
    - monitoring
  parameters:
    ApplicationName: "{{ stacks.buyer_frontend_app.parameters.ApplicationName }}"
    EnvironmentName: "dmbuyer-{{ stage[:3] }}-{{ environment }}"

    # EnvVar* variables are written to Elastic Beanstalk environment
    # as EnvVarDmVarName -> DM_VAR_NAME
    EnvVarDmAppName: "{{ stacks.buyer_frontend_app.parameters.ApplicationName|replace('digitalmarketplace-', '') }}"
    EnvVarDmEnvironment: "{{ stage }}"
    EnvVarDmMetricsNamespace: "{{ stage }}-{{ environment }}/{{ stacks.buyer_frontend_app.parameters.ApplicationName|replace('digitalmarketplace-', '') }}"
    EnvVarDmApiUrl: "{{ stacks.api.outputs.URL }}"
    EnvVarDmBuyerFrontendApiAuthToken: "{{ api.auth_tokens[0] }}"
    EnvVarDmBuyerFrontendSearchApiAuthToken: "{{ search_api.auth_tokens[0] }}"
    EnvVarDmSearchApiUrl: "{{ stacks.search_api.outputs.URL }}"
    EnvVarDmSearchApiAuthToken: "{{ search_api.auth_tokens[0] }}"
    EnvVarDmDataApiUrl: "{{ stacks.api.outputs.URL }}"
    EnvVarDmDataApiAuthToken: "{{ api.auth_tokens[0] }}"
    EnvVarDmMandrillApiKey: "{{ shared_tokens.mandrill_key }}"
    EnvVarDmPasswordSecretKey: "{{ shared_tokens.password_key }}"
    EnvVarSecretKey: "{{ shared_tokens.password_key }}"
    EnvVarDmSharedEmailKey: "{{ shared_tokens.shared_email_key }}"
    EnvVarSharedEmailKey: "{{ shared_tokens.shared_email_key }}"

    KeyName: "{{ key_name }}"
    InstanceType: "{{ buyer_frontend.instance_type }}"
    MinInstanceCount: "{{ buyer_frontend.min_instance_count }}"
    MaxInstanceCount: "{{ buyer_frontend.max_instance_count }}"

    VPCId: "{{ vpc_id }}"
    Subnets: "{{ subnets | join(',') }}"
    Domain: "{{ stage }}-{{ environment }}-buyer-frontend.{{ internal_root_domain }}"
    HostedZoneName: "{{ stacks.route53zone.outputs.InternalHostedZoneName }}"

    LogGroupName: "{{ stacks.monitoring.outputs.LogGroupName }}"
    JSONLogGroupName: "{{ stacks.monitoring.outputs.JSONLogGroupName }}"
    MonitoringSNSTopic: "{{ stacks.monitoring.outputs.MonitoringSNSTopic }}"

supplier_frontend_app:
  name: "digitalmarketplace-supplier-frontend-app"
  template: cloudformation_templates/aws_elasticbeanstalk_app.json
  parameters:
    ApplicationName: "digitalmarketplace-supplier-frontend"

supplier_frontend:
  name: "digitalmarketplace-supplier-frontend-{{ stage }}-{{ environment }}"
  repo_url: "git@github.com:alphagov/digitalmarketplace-supplier-frontend.git"
  template: cloudformation_templates/aws_digitalmarketplace_supplier_frontend.json
  dependencies:
    - documents_s3
    - communications_s3
    - submissions_s3
    - agreements_s3
    - g7_draft_documents_s3
    - api
    - supplier_frontend_app
    - route53zone
    - monitoring
  parameters:
    ApplicationName: "{{ stacks.supplier_frontend_app.parameters.ApplicationName }}"
    EnvironmentName: "dmsuppl-{{ stage[:3] }}-{{ environment }}"

    # EnvVar* variables are written to Elastic Beanstalk environment
    # as EnvVarDmVarName -> DM_VAR_NAME
    EnvVarDmAppName: "{{ stacks.supplier_frontend_app.parameters.ApplicationName|replace('digitalmarketplace-', '') }}"
    EnvVarDmEnvironment: "{{ stage }}"
    EnvVarDmMetricsNamespace: "{{ stage }}-{{ environment }}/{{ stacks.supplier_frontend_app.parameters.ApplicationName|replace('digitalmarketplace-', '') }}"
    EnvVarDmG7DraftDocumentsBucket: "{{ stacks.g7_draft_documents_s3.outputs.Name }}"
    EnvVarDmG7DraftDocumentsUrl: "https://{% if stage != 'production' %}{{ stage }}-{% endif %}{% if stage != environment %}{{ environment }}-{% endif %}assets.{{root_domain}}"
    EnvVarDmAgreementsBucket: "{{ stacks.agreements_s3.outputs.Name }}"
    EnvVarDmCommunicationsBucket: "{{ stacks.communications_s3.outputs.Name }}"
    EnvVarDmDocumentsBucket: "{{ stacks.documents_s3.outputs.Name }}"
    EnvVarDmSubmissionsBucket: "{{ stacks.submissions_s3.outputs.Name }}"
    EnvVarDmAssetsUrl: "https://{% if stage != 'production' %}{{ stage }}-{% endif %}{% if stage != environment %}{{ environment }}-{% endif %}assets.{{ root_domain }}"
    EnvVarDmSupplierFrontendApiAuthToken: "{{ api.auth_tokens[0] }}"
    EnvVarDmDataApiUrl: "{{ stacks.api.outputs.URL }}"
    EnvVarDmDataApiAuthToken: "{{ api.auth_tokens[0] }}"
    EnvVarDmMandrillApiKey: "{{ shared_tokens.mandrill_key }}"
    EnvVarDmClarificationQuestionEmail: "{{ supplier_frontend.clarification_question_email }}"
    EnvVarDmFollowUpEmailTo: "{{ supplier_frontend.follow_up_email_to }}"
    EnvVarDmPasswordSecretKey: "{{ shared_tokens.password_key }}"
    EnvVarSecretKey: "{{ shared_tokens.password_key }}"
    EnvVarDmSharedEmailKey: "{{ shared_tokens.shared_email_key }}"
    EnvVarSharedEmailKey: "{{ shared_tokens.shared_email_key }}"

    KeyName: "{{ key_name }}"
    InstanceType: "{{ supplier_frontend.instance_type }}"
    MinInstanceCount: "{{ supplier_frontend.min_instance_count }}"
    MaxInstanceCount: "{{ supplier_frontend.max_instance_count }}"

    VPCId: "{{ vpc_id }}"
    Subnets: "{{ subnets | join(',') }}"
    Domain: "{{ stage }}-{{ environment }}-supplier-frontend.{{ internal_root_domain }}"
    HostedZoneName: "{{ stacks.route53zone.outputs.InternalHostedZoneName }}"

    LogGroupName: "{{ stacks.monitoring.outputs.LogGroupName }}"
    JSONLogGroupName: "{{ stacks.monitoring.outputs.JSONLogGroupName }}"
    MonitoringSNSTopic: "{{ stacks.monitoring.outputs.MonitoringSNSTopic }}"

nginx:
  name: "nginx-{{ stage }}-{{ environment }}"
  template: cloudformation_templates/aws_nginx.json
  dependencies:
    - admin_frontend
    - supplier_frontend
    - buyer_frontend
    - documents_s3
    - communications_s3
    - submissions_s3
    - agreements_s3
    - route53zone
    - monitoring
  parameters:
    KeyName: "{{ key_name }}"
    UserIPs: "{{ user_ips | join(',') }}"
    AdminUserIPs: "{{ admin_user_ips | join(',') }}"
    DevUserIPs: "{{ dev_user_ips | join(',') }}"

    LogGroupName: "{{ stacks.monitoring.outputs.LogGroupName }}"
    JSONLogGroupName: "{{ stacks.monitoring.outputs.JSONLogGroupName }}"

    G7DraftDocumentsS3URL: "{{stacks.g7_draft_documents_s3.outputs.URL}}"
    DocumentsS3URL: "{{stacks.documents_s3.outputs.URL}}"
    AgreementsS3URL: "{{ stacks.agreements_s3.outputs.URL }}"
    CommunicationsS3URL: "{{ stacks.communications_s3.outputs.URL }}"
    SubmissionsS3URL: "{{ stacks.submissions_s3.outputs.URL }}"
    ApiURL: "{{stacks.api.outputs.URL}}"
    SearchApiURL: "{{stacks.search_api.outputs.URL}}"
    AdminFrontendURL: "{{stacks.admin_frontend.outputs.URL}}"
    BuyerFrontendURL: "{{stacks.buyer_frontend.outputs.URL}}"
    SupplierFrontendURL: "{{stacks.supplier_frontend.outputs.URL}}"

    RootDomain: "{{ root_domain }}"
    Subdomain: "{% if stage != 'production' %}{{ stage }}{% else %}www{% endif %}{% if stage != environment %}-{{ environment }}{% endif %}"
    ApiSubdomain: "{% if stage != 'production' %}{{ stage }}-{% endif %}{% if stage != environment %}{{ environment }}-{% endif %}api"
    SearchApiSubdomain: "{% if stage != 'production' %}{{ stage }}-{% endif %}{% if stage != environment %}{{ environment }}-{% endif %}search-api"
    AssetsSubdomain: "{% if stage != 'production' %}{{ stage }}-{% endif %}{% if stage != environment %}{{ environment }}-{% endif %}assets"
    HostedZoneName: "{{ stacks.route53zone.outputs.HostedZoneName }}"
    SSLCertificateId: "{{ ssl_certificate_id }}"

    LoadBalancerName: "nginx-{{ stage }}-{{ environment }}"
    GroupTag: "nginx-{{ stage }}-{{ environment }}"
    InstanceCount: "{{ nginx.instance_count }}"
    InstanceType: "{{ nginx.instance_type }}"
    InstanceImage: "{{ nginx.instance_image }}"

jenkins:
  name: "jenkins-{{ stage }}"
  template: cloudformation_templates/aws_jenkins.json
  dependencies:
    - route53zone
  parameters:
    UserIPs: "{{ dev_user_ips | join(',') }}"

    HostedZoneName: "{{ stacks.route53zone.outputs.HostedZoneName }}"
    RootDomain: "{{ root_domain }}"
    Subdomain: "ci"
    LogsSubdomain: "logs"
    Port: "{{ jenkins.port }}"

    KeyName: "{{ key_name }}"
    GroupTag: "jenkins-{{ stage }}"
    InstanceType: "{{ jenkins.instance_type }}"
    InstanceImage: "{{ jenkins.instance_image }}"

kibana:
  name: "kibana-{{ stage }}-{{ environment }}"
  template: cloudformation_templates/aws_kibana.json
  dependencies:
    - monitoring
  parameters:
    DomainName: "kibana-{{ stage }}-{{ environment }}"
    UserIPs: "{{ jenkins_ips | join(',') }}"
    InstanceType: "{{ kibana.instance_type }}"

lambda_code_s3:
  name: "lambda-code-s3-{{ stage }}-{{ environment }}"
  template: cloudformation_templates/aws_s3.json
  dependencies:
    - logs_s3
  parameters:
    BucketName: "digitalmarketplace-lambda-code-{{ stage }}-{{ environment }}"
    LogsBucket: "{{ stacks.logs_s3.outputs.Name }}"
    AccessControl: "Private"

cloudwatch_logs_lambda:
  name: "cloudwatch-logs-lambda-{{ stage }}-{{ environment }}"
  template: cloudformation_templates/aws_lambda.json
  dependencies:
    - kibana
  parameters:
    FunctionName: "dm-cloudwatch-logs-{{ stage }}-{{ environment }}"
    S3Bucket: "digitalmarketplace-lambda-code-{{ stage }}-{{ environment }}"
    S3Key: "cloudwatch-logs-{{ stage }}-{{ environment }}.zip"

    # Additional parameters used by the function code. Names match
    # the ElasticBeanstalk environment variable convention since
    # we need to autogenerate the matching parameter declaration
    # in the cloudformation template
    EnvVarElasticsearchEndpoint: "{{ stacks.kibana.outputs.Domain }}"

lambda_logs_subscription:
  name: "lambda-logs-subscription-{{ stage }}-{{ environment }}"
  template: cloudformation_templates/aws_log_subscription.json
  dependencies:
    - cloudwatch_logs_lambda
  parameters:
    Lambda: "{{ stacks.cloudwatch_logs_lambda.outputs.Arn }}"
    FilterPattern: '{ ($.request NOT EXISTS || $.request != "*/_status?ignore-dependencies *") && ($.url NOT EXISTS || $.url != "*/_status?ignore-dependencies") && ($.remoteHost NOT EXISTS || $.remoteHost != "::1") }'
    LogGroupName: "{{ stacks.monitoring.outputs.JSONLogGroupName }}"

jenkins_ssh_access:
  name: "jenkins-{{ stage }}-ssh-access"
  template: cloudformation_templates/aws_dev_access.json
  dependencies:
    - jenkins
  parameters:
    CidrIPs: "{{ dev_user_ips | join(',') }}"
    FromPort: 22
    ToPort: 22
    SecurityGroup: "{{ stacks.jenkins.outputs.InstanceSecurityGroup }}"

jenkins_letsencrypt_access:
  name: "jenkins-{{ stage }}-letsencrypt-access"
  template: cloudformation_templates/aws_dev_access.json
  dependencies:
    - jenkins
  parameters:
    CidrIPs: "0.0.0.0/0"
    FromPort: 80
    ToPort: 80
    SecurityGroup: "{{ stacks.jenkins.outputs.InstanceSecurityGroup }}"

nginx_ssh_access:
  name: "nginx-{{ stage }}-{{ environment }}-ssh-access"
  template: cloudformation_templates/aws_dev_access.json
  dependencies:
    - nginx
  parameters:
    CidrIPs: "{{ dev_user_ips | join(',') }}"
    FromPort: 22
    ToPort: 22
    SecurityGroup: "{{ stacks.nginx.outputs.InstanceSecurityGroup }}"

api_ssh_access:
  name: "api-{{ stage }}-{{ environment }}-ssh-access"
  template: cloudformation_templates/aws_dev_access.json
  dependencies:
    - api
  parameters:
    CidrIPs: "{{ dev_user_ips | join(',') }}"
    FromPort: 22
    ToPort: 22
    SecurityGroup: "{{ stacks.api.outputs.InstanceSecurityGroup }}"

search_api_ssh_access:
  name: "search-api-{{ stage }}-{{ environment }}-ssh-access"
  template: cloudformation_templates/aws_dev_access.json
  dependencies:
    - search_api
  parameters:
    CidrIPs: "{{ dev_user_ips | join(',') }}"
    FromPort: 22
    ToPort: 22
    SecurityGroup: "{{ stacks.search_api.outputs.InstanceSecurityGroup }}"

admin_frontend_ssh_access:
  name: "admin-frontend-{{ stage }}-{{ environment }}-ssh-access"
  template: cloudformation_templates/aws_dev_access.json
  dependencies:
    - admin_frontend
  parameters:
    CidrIPs: "{{ dev_user_ips | join(',') }}"
    FromPort: 22
    ToPort: 22
    SecurityGroup: "{{ stacks.admin_frontend.outputs.InstanceSecurityGroup }}"

buyer_frontend_ssh_access:
  name: "buyer-frontend-{{ stage }}-{{ environment }}-ssh-access"
  template: cloudformation_templates/aws_dev_access.json
  dependencies:
    - buyer_frontend
  parameters:
    CidrIPs: "{{ dev_user_ips | join(',') }}"
    FromPort: 22
    ToPort: 22
    SecurityGroup: "{{ stacks.buyer_frontend.outputs.InstanceSecurityGroup }}"

supplier_frontend_ssh_access:
  name: "supplier-frontend-{{ stage }}-{{ environment }}-ssh-access"
  template: cloudformation_templates/aws_dev_access.json
  dependencies:
    - supplier_frontend
  parameters:
    CidrIPs: "{{ dev_user_ips | join(',') }}"
    FromPort: 22
    ToPort: 22
    SecurityGroup: "{{ stacks.supplier_frontend.outputs.InstanceSecurityGroup }}"
