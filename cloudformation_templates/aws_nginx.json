{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "EC2 reverse proxy",

  "Parameters": {
    "GroupTag": {
      "Type": "String",
      "Description": "Group Tag"
    },

    "UserIPs": {
      "Type": "String",
      "Description": "Comma-separated list of CIDRs for ELB ingress rule"
    },

    "AdminUserIPs": {
      "Type": "String",
      "Description": "Comma-separated list of CIDRs/IPs for nginx /admin allow rule"
    },

    "RootDomain": {
      "Type": "String",
      "Description": "Root domain for the public Route 53 records"
    },
    "Subdomain": {
      "Type": "String",
      "Description": "Subdomain to serve the Beanstalk environment from"
    },
    "AdminFrontendURL": {
      "Type": "String",
      "Description": "URL for the app."
    },
    "BuyerFrontendURL": {
      "Type": "String",
      "Description": "URL for the app."
    },
    "SupplierFrontendURL": {
      "Type": "String",
      "Description": "URL for the app."
    },

    "ApiSubdomain": {
      "Type": "String",
      "Description": "Subdomain to serve api from"
    },
    "ApiURL": {
      "Type": "String",
      "Description": "URL for the app."
    },

    "SearchApiSubdomain": {
      "Type": "String",
      "Description": "Subdomain to serve API from"
    },
    "SearchApiURL": {
      "Type": "String",
      "Description": "URL for the app."
    },

    "AssetsSubdomain": {
      "Type": "String",
      "Description": "Subdomain to serve assets from"
    },
    "G7DraftDocumentsS3URL": {
      "Type": "String",
      "Description": "G7 Draft Documents S3 bucket URL"
    },
    "DocumentsS3URL": {
      "Type": "String",
      "Description": "Documents S3 bucket URL"
    },
    "AgreementsS3URL": {
      "Type": "String",
      "Description": "Framework agreements S3 bucket URL"
    },
    "CommunicationsS3URL": {
      "Type": "String",
      "Description": "Framework communications S3 bucket URL"
    },
    "SubmissionsS3URL": {
      "Type": "String",
      "Description": "Framework communications S3 bucket URL"
    },

    "JSONLogGroupName": {
      "Type": "String",
      "Description": "Name of CloudWatch JSON log group"
    },
    "LogGroupName": {
      "Type": "String",
      "Description": "Name of CloudWatch log group"
    },
    "HostedZoneName": {
      "Type": "String",
      "Description": "Route53 hosted zone name to serve the Beanstalk environment from"
    },
    "SSLCertificateId": {
      "Type": "String",
      "Description": "Amazon Resource Name (ARN) for the SSL certificate"
    },
    "LoadBalancerName": {
      "Type": "String",
      "Description": "ELB name prefix"
    },
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the server"
    },
    "InstanceImage" : {
      "Description" : "EC2 instance image",
      "Type" : "String"
    },
    "InstanceType" : {
      "Description" : "EC2 instance type",
      "Type" : "String"
    },
   "InstanceCount" : {
      "Description" : "Number of instances to start",
      "Type" : "String"
    }
  },

  "Resources": {
    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Main instance security group"
      }
    },

    "LoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "ELB security group",
        "SecurityGroupIngress": [
{% for user_ip in parameters.UserIPs.split(",") %}
          {"IpProtocol": "tcp", "CidrIp": "{{ user_ip }}", "FromPort": 443, "ToPort": 443}{% if not loop.last %},{% endif %}

{% endfor %}
        ]
      }
    },

    "InstanceELBIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": {"Ref": "InstanceSecurityGroup"},
        "IpProtocol": "tcp",
        "FromPort": 80,
        "ToPort": 80,
        "SourceSecurityGroupName": {"Ref": "LoadBalancerSecurityGroup"}
      }
    },

    "IAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
              "Effect": "Allow",
              "Principal": {
                  "Service": [ "ec2.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "nginx-cloudwatch-policy",
          "PolicyDocument": {
            "Version" : "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:GetLogEvents",
                "logs:PutLogEvents",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams"
              ],
              "Resource": [
                "arn:aws:logs:eu-west-1:*:*"
              ]
            }]
          }
        }]
      }
    },
    "InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [{"Ref": "IAMRole"}]
      }
    },

    "LoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "LoadBalancerName": {"Ref": "LoadBalancerName"},
        "AvailabilityZones": {"Fn::GetAZs": ""},
        "CrossZone": "true",
        "Policies": [{
          "PolicyName": "LoadBalancerSSLPolicy",
          "PolicyType": "SSLNegotiationPolicyType",
          "Attributes": [{
            "Name" : "Reference-Security-Policy",
            "Value" : "ELBSecurityPolicy-2015-05"
          }]
        }],
        "Listeners": [{
          "LoadBalancerPort": "443",
          "InstancePort": "80",
          "PolicyNames": ["LoadBalancerSSLPolicy"],
          "SSLCertificateId": {"Ref": "SSLCertificateId"},
          "Protocol": "HTTPS"
        }],
        "SecurityGroups": [
          {"Fn::GetAtt": ["LoadBalancerSecurityGroup", "GroupId"]}
        ],
        "ConnectionDrainingPolicy": {
          "Enabled": true,
          "Timeout": 300
        },
        "HealthCheck": {
          "Target": "HTTP:80/_status",
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "5",
          "Interval": "30",
          "Timeout": "5"
        }
      }
    },

    "Route53RecordSet": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneName": {"Ref": "HostedZoneName"},
        "Name": {"Fn::Join": ["",[
          {"Ref": "Subdomain"}, ".", {"Ref": "RootDomain"}, "."
         ]]},
        "Type": "CNAME",
        "ResourceRecords": [
          {"Fn::GetAtt": ["LoadBalancer", "DNSName"]}
        ],
        "TTL": "300"
      }
    },

    "ApiRoute53RecordSet": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneName": {"Ref": "HostedZoneName"},
        "Name": {"Fn::Join": ["",[
          {"Ref": "ApiSubdomain"}, ".", {"Ref": "RootDomain"}, "."
         ]]},
        "Type": "CNAME",
        "ResourceRecords": [
          {"Fn::GetAtt": ["LoadBalancer", "DNSName"]}
        ],
        "TTL": "300"
      }
    },

    "SearchApiRoute53RecordSet": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneName": {"Ref": "HostedZoneName"},
        "Name": {"Fn::Join": ["",[
          {"Ref": "SearchApiSubdomain"}, ".", {"Ref": "RootDomain"}, "."
         ]]},
        "Type": "CNAME",
        "ResourceRecords": [
          {"Fn::GetAtt": ["LoadBalancer", "DNSName"]}
        ],
        "TTL": "300"
      }
    },

    "AssetsRoute53RecordSet": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneName": {"Ref": "HostedZoneName"},
        "Name": {"Fn::Join": ["",[
          {"Ref": "AssetsSubdomain"}, ".", {"Ref": "RootDomain"}, "."
         ]]},
        "Type": "CNAME",
        "ResourceRecords": [
          {"Fn::GetAtt": ["LoadBalancer", "DNSName"]}
        ],
        "TTL": "300"
      }
    },

    "AutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "Tags" : [
          {
            "Key": "Group",
            "Value": {"Ref": "GroupTag"},
            "PropagateAtLaunch": true
          },
          {
            "Key": "Name",
            "Value": {"Ref": "GroupTag"},
            "PropagateAtLaunch": true
          }
        ],
        "AvailabilityZones" : {"Fn::GetAZs": ""},
        "LaunchConfigurationName" : {"Ref": "LaunchConfiguration"},
        "LoadBalancerNames": [{"Ref": "LoadBalancer"}],
        "HealthCheckType": "ELB",
        "HealthCheckGracePeriod": 300,
        "MinSize" : {"Ref": "InstanceCount"},
        "MaxSize" : {"Ref": "InstanceCount"},
        "DesiredCapacity" : {"Ref": "InstanceCount"}
      },
      "UpdatePolicy" : {
        "AutoScalingRollingUpdate": {
          "PauseTime" : "PT10M",
          "MinInstancesInService": "1",
          "MaxBatchSize": "1"
        }
      }
    },

    "LaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "SecurityGroups": [{"Ref": "InstanceSecurityGroup"}],
        "ImageId": {"Ref": "InstanceImage"},
        "KeyName": {"Ref": "KeyName"},
        "IamInstanceProfile": {"Ref": "InstanceProfile"},
        "InstanceType": {"Ref": "InstanceType"},
        "UserData": {"Fn::Base64": {"Fn::Join": ["", [
            "#!/bin/bash","\n",
            "cd /home/ubuntu/provisioning && ",
            "ansible-playbook -c local -i localhost, nginx_playbook.yml ",
            "-t instance-config ",
            "-e aws_region=", {"Ref": "AWS::Region"}, " ",
            "-e admin_user_ips=", {"Ref": "AdminUserIPs"}, " ",
            "-e nameserver_ip=$(awk '/nameserver/{ print $2; exit}' /etc/resolv.conf) ",
            "-e cloudwatch_log_group=", {"Ref": "LogGroupName"}, " ",
            "-e cloudwatch_json_log_group=", {"Ref": "JSONLogGroupName"}, " ",
            "-e assets_subdomain=", {"Ref": "AssetsSubdomain"}, " ",
            "-e g7_draft_documents_s3_url=", {"Ref": "G7DraftDocumentsS3URL"}, " ",
            "-e documents_s3_url=", {"Ref": "DocumentsS3URL"}, " ",
            "-e agreements_s3_url=", {"Ref": "AgreementsS3URL"}, " ",
            "-e communications_s3_url=", {"Ref": "CommunicationsS3URL"}, " ",
            "-e submissions_s3_url=", {"Ref": "SubmissionsS3URL"}, " ",
            "-e api_subdomain=", {"Ref": "ApiSubdomain"}, " ",
            "-e api_url=", {"Ref": "ApiURL"}, " ",
            "-e search_api_subdomain=", {"Ref": "SearchApiSubdomain"}, " ",
            "-e search_api_url=", {"Ref": "SearchApiURL"}, " ",
            "-e www_subdomain=", {"Ref": "Subdomain"}, " ",
            "-e buyer_frontend_url=", {"Ref": "BuyerFrontendURL"}, " ",
            "-e admin_frontend_url=", {"Ref": "AdminFrontendURL"}, " ",
            "-e supplier_frontend_url=", {"Ref": "SupplierFrontendURL"}
        ]]}}
      }
    }
  },

  "Outputs": {
    "InstanceSecurityGroup": {
      "Description": "EC2 instances security group",
      "Value": {"Ref": "InstanceSecurityGroup"}
    },
    "LoadBalancerSecurityGroup": {
      "Description": "ELB security group",
      "Value": {"Ref": "LoadBalancerSecurityGroup"}
    },
    "LoadBalancerDNS": {
      "Description": "Load Balancer DSN name",
      "Value": {"Fn::GetAtt": ["LoadBalancer", "DNSName"]}
    },
    "LoadBalancerHostedZoneID": {
      "Description": "Load Balancer hosted zone",
      "Value": {"Fn::GetAtt": ["LoadBalancer", "CanonicalHostedZoneNameID"]}
    },
    "AssetsURL": {
      "Description": "URL of the assets server",
      "Value": {
        "Fn::Join": ["", [
          "https://",
          {"Ref" :"AssetsSubdomain"},
          ".",
          {"Ref" :"RootDomain"}
        ]]
      }
    },
    "ApiURL": {
      "Description": "URL of the API server",
      "Value": {
        "Fn::Join": ["", [
          "https://",
          {"Ref" :"ApiSubdomain"},
          ".",
          {"Ref" :"RootDomain"}
        ]]
      }
    },
    "URL": {
      "Description": "URL of the www server",
      "Value": {
        "Fn::Join": ["", [
          "https://",
          {"Ref" :"Subdomain"},
          ".",
          {"Ref" :"RootDomain"}
        ]]
      }
    }
  }
}
