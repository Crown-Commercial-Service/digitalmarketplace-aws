{% import "metrics.j2" as metrics %}
{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Digital Marketplace Elastic Beanstalk Environment",

  "Parameters": {
{% for variable in environment_variables %}
    "{{ variable }}": {
        "Type": "String",
        "Description": "Elastic Beanstalk environment variable",
        "NoEcho": "true"
    },
{% endfor %}
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the server"
    },
    "ApplicationName": {
      "Type": "String",
      "Description": "Elastic Beanstalk Application name"
    },
    "EnvironmentName": {
      "Type": "String",
      "Description": "Elastic Beanstalk Environment name"
    },
    "VPCId": {
      "Type": "String",
      "Description": "VPC ID"
    },
    "Subnets": {
      "Type": "String",
      "Description": "List of subnets for internal ELB and instances"
    },
    "Domain": {
      "Type": "String",
      "Description": "Domain to serve the Beanstalk environment from"
    },
    "HostedZoneName": {
      "Type": "String",
      "Description": "Route53 hosted zone name to serve the Beanstalk environment from"
    },
    "InstanceType": {
      "Type": "String",
      "Description": "EC2 instance type"
    },
    "MinInstanceCount": {
      "Type": "Number",
      "Description": "MinSize of the Auto Scaling group"
    },
    "MaxInstanceCount": {
      "Type": "Number",
      "Description": "MaxSize of the Auto Scaling group"
    },
    "LogGroupName": {
      "Type": "String",
      "Description": "Name of CloudWatch log group"
    },
    "JSONLogGroupName": {
      "Type": "String",
      "Description": "Name of CloudWatch JSON log group"
    },
    "MonitoringSNSTopic": {
      "Type": "String",
      "Description": "SNS topic for monitoring events"
    }{%- if self.parameters() %},
    {% endif %}

{% block parameters %}
{% endblock %}
  },

  "Resources": {
    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "EC2 instances security group.",
        "SecurityGroupIngress": []
      }
    },

    "IAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": ["ec2.amazonaws.com"]
            },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "digitalmarketplace-eb-policy",
          "PolicyDocument": {
            "Version" : "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "s3:Get*",
                "s3:List*",
                "s3:Put*",
                "cloudwatch:PutMetricData"
              ],
              "Resource": "*"
            }, {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:GetLogEvents",
                "logs:PutLogEvents",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams"
              ],
              "Resource": [
                "arn:aws:logs:eu-west-1:*:*"
              ]
            }]
          }
        }]
      }
    },

    "InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [{
          "Ref": "IAMRole"
        }]
      }
    },

    "ConfigurationTemplate": {
      "Type": "AWS::ElasticBeanstalk::ConfigurationTemplate",
      "Properties": {
        "ApplicationName": {"Ref": "ApplicationName"},
        "Description": "Elastic Beanstalk Configuration",
        "SolutionStackName": "{% block solution_stack %}64bit Amazon Linux 2015.03 v1.4.3 running Python 2.7{% endblock %}",
        "OptionSettings": [
          {
            "Namespace": "aws:autoscaling:asg",
            "OptionName": "MinSize",
            "Value": {"Ref": "MinInstanceCount"}
          },
          {
            "Namespace": "aws:autoscaling:asg",
            "OptionName": "MaxSize",
            "Value": {"Ref": "MaxInstanceCount"}
          },
          {
            "Namespace": "aws:autoscaling:launchconfiguration",
            "OptionName": "EC2KeyName",
            "Value": {"Ref": "KeyName"}
          },
          {
            "Namespace": "aws:autoscaling:launchconfiguration",
            "OptionName": "InstanceType",
            "Value": {"Ref": "InstanceType"}
          },
          {
            "Namespace": "aws:autoscaling:launchconfiguration",
            "OptionName": "SecurityGroups",
            "Value": {"Fn::GetAtt": ["InstanceSecurityGroup", "GroupId"]}
          },
          {
            "Namespace": "aws:autoscaling:launchconfiguration",
            "OptionName": "SSHSourceRestriction",
            "Value": "tcp, 22, 22, 127.0.0.1/32"
          },
          {
            "Namespace": "aws:autoscaling:launchconfiguration",
            "OptionName": "IamInstanceProfile",
            "Value": {"Ref": "InstanceProfile"}
          },
{% for variable in environment_variables %}
          {
            "Namespace": "aws:elasticbeanstalk:application:environment",
            "OptionName": "{{ param_to_env(variable) }}",
            "Value": {"Ref": "{{ variable }}"}
          },
{% endfor %}
          {
            "Namespace": "aws:elasticbeanstalk:application",
            "OptionName": "Application Healthcheck URL",
            "Value": "{% block url_prefix %}/{% endblock %}_status?ignore-dependencies"
          },
          {
            "Namespace": "aws:elasticbeanstalk:container:python:staticfiles",
            "OptionName": "{{ self.url_prefix() }}static/",
            "Value": "app/static/"
          },
          {
            "Namespace": "aws:elasticbeanstalk:hostmanager",
            "OptionName": "LogPublicationControl",
            "Value": "true"
          },
          {
            "Namespace": "aws:ec2:vpc",
            "OptionName": "VPCId",
            "Value": {"Ref": "VPCId"}
          },
          {
            "Namespace": "aws:ec2:vpc",
            "OptionName": "Subnets",
            "Value": {"Ref": "Subnets"}
          },
          {
            "Namespace": "aws:ec2:vpc",
            "OptionName": "ELBSubnets",
            "Value": {"Ref": "Subnets"}
          },
          {
            "Namespace": "aws:ec2:vpc",
            "OptionName": "ELBScheme",
            "Value": "internal"
          },
          {
            "Namespace": "aws:elb:loadbalancer",
            "OptionName": "CrossZone",
            "Value": true
          },
          {
            "Namespace": "aws:elb:loadbalancer",
            "OptionName": "LoadBalancerHTTPPort",
            "Value": "80"
          },
          {
            "Namespace": "aws:elb:policies",
            "OptionName": "ConnectionDrainingEnabled",
            "Value": true
          },
          {
            "Namespace": "aws:autoscaling:updatepolicy:rollingupdate",
            "OptionName": "RollingUpdateEnabled",
            "Value": true
          },
          {
            "Namespace": "aws:elasticbeanstalk:command",
            "OptionName": "BatchSize",
            "Value": "1"
          },
          {
            "Namespace": "aws:elasticbeanstalk:command",
            "OptionName": "BatchSizeType",
            "Value": "Fixed"
          },
          {
            "Namespace": "aws:elasticbeanstalk:customoption",
            "OptionName": "LogGroupName",
            "Value": {"Ref": "LogGroupName"}
          },
          {
            "Namespace": "aws:elasticbeanstalk:customoption",
            "OptionName": "JSONLogGroupName",
            "Value": {"Ref": "JSONLogGroupName"}
          },
          {
            "Namespace": "aws:elasticbeanstalk:customoption",
            "OptionName": "ApplicationName",
            "Value": {"Ref": "ApplicationName"}
          },
          {
            "Namespace": "aws:elasticbeanstalk:sns:topics",
            "OptionName": "Notification Topic ARN",
            "Value": {"Ref": "MonitoringSNSTopic"}
          }
        ]
      }
    },

    "Environment": {
      "Type": "AWS::ElasticBeanstalk::Environment",
      "Properties": {
        "ApplicationName": {"Ref": "ApplicationName"},
        "EnvironmentName": {"Ref": "EnvironmentName"},
        "TemplateName": {"Ref": "ConfigurationTemplate"},
        "Description": "Digital Marketplace EB Environment"
      }
    },
    {{ metrics.metric_filter("HTTP2xxMetricFilter",
                             pattern="$.logType = apache-access && $.status = 2*",
                             metric_name="HTTP2xx",
                             metric_value=1) }},

    {{ metrics.metric_filter("HTTPNon2xxMetricFilter",
                             pattern="$.logType = apache-access && $.status != 2*",
                             metric_name="HTTP2xx",
                             metric_value=0) }},

    {{ metrics.metric_filter("HTTP5xxMetricFilter",
                             pattern="$.logType = apache-access && $.status = 5*",
                             metric_name="HTTP5xx",
                             metric_value=1) }},

    {{ metrics.metric_filter("HTTPNon5xxMetricFilter",
                             pattern="$.logType = apache-access && $.status != 5*",
                             metric_name="HTTP5xx",
                             metric_value=0) }},

    {{ metrics.alarm("HTTP5xxCountAlarm",
                    metric_name="HTTP5xx",
                    statistic="Sum",
                    period=60,
                    evaluation_periods=1,
                    threshold=1,
                    comparison_operator="GreaterThanThreshold",
                    depends_on=[
                      "HTTP5xxMetricFilter",
                      "HTTPNon5xxMetricFilter"
                    ]) }},

    {{ metrics.metric_filter("ApacheRequestTimeFilter",
                             pattern="$.logType = apache-access",
                             metric_name="ApacheRequestTime",
                             metric_value="\"$.requestTimeMicro\"") }},

    {# 4xx related experimental metric filters #}
    {{ metrics.metric_filter("HTTP4xxMetricFilter",
                             pattern="$.logType = apache-access && $.status = 4*",
                             metric_name="HTTP4xx",
                             metric_value=1) }},

    {{ metrics.metric_filter("HTTPNon4xxMetricFilter",
                             pattern="$.logType = apache-access && $.status != 4*",
                             metric_name="HTTP4xx",
                             metric_value=0) }},

    {{ metrics.metric_filter("HTTPBadRequestMetricFilter",
                             pattern="$.logType = apache-access && ($.status = 400 || $.status = 405)",
                             metric_name="BadRequest",
                             metric_value=1) }},

    {{ metrics.metric_filter("HTTPNonBadRequestMetricFilter",
                             pattern="$.logType = apache-access && $.status != 400 && $.status != 405",
                             metric_name="BadRequest",
                             metric_value=0) }},

    {{ metrics.metric_filter("HTTPBadAuthMetricFilter",
                             pattern="$.logType = apache-access && ($.status >= 401 && $.status <= 403)",
                             metric_name="BadAuth",
                             metric_value=1) }},

    {{ metrics.metric_filter("HTTPNonBadAuthMetricFilter",
                             pattern="$.logType = apache-access && ($.status < 401 || $.status > 403)",
                             metric_name="BadAuth",
                             metric_value=0) }},

    {{ metrics.metric_filter("HTTPWhatThe4xxMetricFilter",
                             pattern="$.logType = apache-access && ($.status >= 406 && $.status <= 499)",
                             metric_name="WhatThe4xx",
                             metric_value=1) }},

    {{ metrics.metric_filter("HTTPNonWhatThe4xxMetricFilter",
                             pattern="$.logType = apache-access && ($.status < 406 || $.status > 499)",
                             metric_name="WhatThe4xx",
                             metric_value=0) }},

    "Route53RecordSet": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneName": {"Ref": "HostedZoneName"},
        "Name": {"Fn::Join": ["",[
          {"Ref": "Domain"}, "."
         ]]},
        "Type": "CNAME",
        "ResourceRecords": [
          {"Fn::GetAtt": ["Environment", "EndpointURL"]}
        ],
        "TTL": "300"
      }
    }{%- if self.resources() %},
    {% endif %}

{% block resources %}
{% endblock %}
  },

  "Outputs": {
    "InstanceSecurityGroup": {
      "Description": "Instances security group",
      "Value": {"Ref": "InstanceSecurityGroup"}
    },
    "Environment": {
      "Description": "Digital Marketplace EB environment",
      "Value": {"Ref": "Environment"}
    },
    "URL": {
      "Description": "URL of the AWS Elastic Beanstalk Environment",
      "Value": {
        "Fn::Join": ["", [
          "http://",
          {"Ref": "Domain"}
        ]]
      }
    }{%- if self.outputs() %},
    {% endif %}

{% block outputs %}
{% endblock %}
  }
}
